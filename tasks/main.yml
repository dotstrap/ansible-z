---

#####=== install ===#####

- block:
    - name: bash/sh/zsh | setup | dotstrap directory
      file: dest="{{ dotstrap_config_dir }}/rupa/z" state=directory

    - name: bash/sh/zsh | install
      get_url:
        url: https://raw.githubusercontent.com/rupa/z/master/z.sh
        dest: "{{ dotstrap_config_dir }}/rupa/z/z.sh"
        force: yes
  when: ansible_user_shell | match(".*\/(bash|zsh|/sh)")
  tags:
    - bootstrap
    - install
    - update

# FIXME: synchronize module does not work
# there are permissions issues...
# - name: fish | install
  # synchronize:
    # src: "{{ item }}"
    # dest: "{{ ansible_user_dir }}/.config/fish"
    # compress: no
    # archive: no
    # dirs: no
  # with_items:
    # - completions
    # - functions

- block:
    - name: fish | install functions
      copy: src="{{ item }}" dest="{{ ansible_user_dir }}/.config/fish/functions"
      with_fileglob: functions/*

    - name: fish | install completions
      copy: src="{{ item }}" dest="{{ ansible_user_dir }}/.config/fish/completions"
      with_fileglob: completions/*
  when: ansible_user_shell | match(".*\/fish")
  tags:
    - bootstrap
    - install
    - update

#####=== configure ===#####

- name: setup | data file directory
  file: dest="{{ z_data_path | dirname }}" state=directory
  when: ansible_user_shell | match(".*\/(fish|bash|zsh|/sh)")
  tags:
    - bootstrap
    - configure
    - update

- block:
    - name: bash/sh/zsh | configure
      blockinfile:
        dest: "{{ dotstrap_config_dir }}/config.{{ ansible_user_shell | basename }}"
        create: yes
        backup: no
        state: "{{ configuration_state }}"
        marker: "{{ z_marker }}"
        block: |
          source "{{ dotstrap_config_dir }}/rupa/z/z.sh"
          export _Z_DATA="{{ z_data_path }}"
          export _Z_CMD="{{ z_cmd }}"
  when: ansible_user_shell | match(".*\/(bash|zsh|/sh)")
  tags:
    - bootstrap
    - configure
    - update

- block:
      # fish hardcodes ~/.config/fish so no need to check $XDG_CONFIG_HOME
    - name: fish | setup | directories
      file: dest="{{ ansible_user_dir }}/.config/fish/{{ item }}" state=directory
      with_items:
        - completions
        - functions

    # TODO: how to handle when fish_prompt does not exist?
    - name: fish | configure | fish_prompt
      blockinfile:
        dest: "{{ ansible_user_dir }}/.config/fish/functions/fish_prompt.fish"
        create: yes
        backup: no
        state: "{{ configuration_state }}"
        marker: "{{ z_marker }}"
        insertafter: function fish_prompt
        block: |
          z --add "$PWD"

    - name: fish | configure | _Z_DATA & _Z_CMD
      command: fish -c "set -U _Z_DATA {{ z_data_path }}; set -U _Z_CMD {{ z_cmd }}"
  when: ansible_user_shell | match(".*\/fish")
  tags:
    - bootstrap
    - configure
    - update
