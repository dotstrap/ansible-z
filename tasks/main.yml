---

- name: setup
  include_vars: "{{ ansible_user_shell | basename }}.yml"

#####=== install ===#####

- block:
  - name: bash/zsh | setup | installation directory
    file: path="{{ z_data_dir }}" state=directory follow=yes

  - name: bash/zsh | install
    get_url:
      url: "{{ z_repo_url }}/{{ item.name }}"
      dest: "{{ z_data_dir }}/{{ item.dest | default(item.name) }}"
      force: yes
    with_items: "{{ z_repo_files }}"
  when: ansible_user_shell | match(".*\/(bash|zsh)")
  tags:
    - bootstrap
    - install
    - update

#####=== configure ===#####

- name: setup | data file directory
  file: dest="{{ z_data_file | dirname }}" state=directory
  when: ansible_user_shell | match(".*\/(bash|zsh|fish)")
  tags:
    - bootstrap
    - configure

- name: bash/zsh | configure | shell initialization
  blockinfile:
    dest: "{{ z_config_file }}"
    create: yes
    backup: no
    state: "{{ z_configure_state }}"
    marker: "{{ z_marker }}"
    block: "{{ z_config_block }}"
  # when: z_config_block is defined
  when: ansible_user_shell | match(".*\/(bash|zsh)")
  tags:
    - bootstrap
    - configure

- block:
    - name: fish | setup | directories
      file: dest="{{ fish_data_dir }}/{{ item }}" state=directory follow=yes
      with_items:
        - completions
        - functions

    - name: fish | install | functions
      template:
        src: "fish/functions/{{ item.name }}.j2"
        dest: "{{ fish_data_dir }}/functions/{{ item.dest | default(item.name) }}.fish"
        force: yes
        backup: no
      with_items:
        - name: z
        - name: z_cmd
          dest: "{{ z_cmd }}"

    - name: fish | install | completions
      copy: src="{{ item }}" dest="{{ fish_data_dir }}/completions"
      with_fileglob: "fish/completions/*"

    # TODO: how to handle when fish_prompt does not exist?
    - name: fish | install | fish_prompt
      blockinfile:
        dest: "{{ fish_data_dir }}/functions/fish_prompt.fish"
        create: yes
        backup: no
        state: "{{ configuration_state }}"
        marker: "{{ z_marker }}"
        insertafter: function fish_prompt
        block: |
          z --add "$PWD"
  when: ansible_user_shell | match(".*\/fish")
  tags:
    - bootstrap
    - install

# Compatability with original rupa/z and fishery/fish-z
- block:
    - name: fish | configure | $Z_DATA, $Z_CMD
      command: fish -c "set -Ux Z_DATA {{ z_data_file }}; set -Ux _Z_DATA {{ z_data_file }}; set -Ux Z_CMD {{ z_cmd }}; set -Ux _Z_CMD {{ z_cmd }}"
  when: ansible_user_shell | match(".*\/fish")
  tags:
    - bootstrap
    - configure
